@page "/counter"

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }
}
@*@using Syncfusion.Blazor.Diagram
@using Syncfusion.Blazor.Buttons
@using System.Collections.ObjectModel*@

@*<SfButton Content="addNode" OnClick="@AddNode" />
<SfButton Content="Edit Node" OnClick="@EditNode" />

<SfDiagramComponent @ref="@diagram" Nodes="@NodeCollection" Height="600px" >
<DiagramTemplates>
        <NodeTemplate>
            <div class="maindiv">
                <div>
                      <img src="images/profile.jpg" class="image" />
                </div>
                <div class="header" >
                    <div class="header1" >
                          Daniel Tonini
                    </div>
                     <div id="header2">
                           Project Lead
                     </div>
                </div
            </div>
        </NodeTemplate>
    </DiagramTemplates>
    </SfDiagramComponent>
@code
{
    //Reference to diagram
    SfDiagramComponent diagram;

    //Defines diagram's nodes collection
    public DiagramObjectCollection<Node> NodeCollection = new DiagramObjectCollection<Node>();
    // public ObservableCollection<>
    //public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<>() { };

    protected override void OnInitialized()
    {
        // nodes = new DiagramObjectCollection<Node>();
        Node node = new Node()
            {
                ID = "group",
                OffsetX = 200,
                OffsetY = 200,
                Width = 200,
                Height = 200,
                Shape = new TextShape()
                {
                    Type = NodeShapes.Text,
                    Content = "Text Node"

                    //Sets the source to the image shape
                    // Source = "/images/profile.jpg"
                },
                Style = new TextStyle()
                {
                    TextAlign = TextAlign.Left
                   
                }

            };*@
       @* //        Annotations = new DiagramObjectCollection<ShapeAnnotation>()
        //{
        //        new ShapeAnnotation()
        //        {
        //            Content = "Node",
        //            Style = new TextStyle()
        //            {
        //                Color = "white",
        //            }
        //        }
        //    },
        //        Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" }
        //    };

//        NodeCollection.Add(node);


//    }

//    private void AddNode()
//    {
//        //To draw an object once, activate draw once
//        diagram.InteractionController = DiagramInteractions.DrawOnce;
//        ////Initialize the drawing object to draw the shape
//        diagram.DrawingObject = new Node()
//            {
//                Shape = new BasicShape() { Type = NodeShapes.Basic, Shape = NodeBasicShapes.Rectangle },
//                //  Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "#6495ED" }
//            };
//    }

//    private void EditNode()
//    {
//        //diagram.BeginUpdate();
//        //NodeCollection[0].Style.Fill = "red";
//        //NodeCollection[0].Style.StrokeColor = "white";
//        diagram.EndUpdate();

//        NodeCollection.Remove(NodeCollection[0]);
//    }
//}

//<style>
//    .maindiv {
//        height: 150px;
//        width: 200px;
//        background-color: aqua
//    }

//    .image {
//        height: 70px;
//        width: 70px;
//        border-radius: 50px;
//        padding: 10px;
//    }

//    .header {
//        margin-left: 72px;
//        margin-top: -62px;
//    }

//    .header1 {
//        font-weight: bold;
//        padding-bottom: 5px;
//    }
//</style>
@using Syncfusion.Blazor.Buttons
<SfButton Content="Add Group" OnClick="@OnClick"></SfButton>
<SfButton Content="Update Group" OnClick="@OnClick"></SfButton>
<SfDiagramComponent Height="500px" @ref="@diagram" Width="1200px" Nodes="@nodes">
</SfDiagramComponent>

@code{
    private void OnClick()
    {
        nodes.Add(groupNode);
        //groupNode.OffsetX = 500;
        //groupNode.OffsetY = 200;
    }
    SfDiagramComponent diagram;
    DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
    NodeGroup groupNode = new NodeGroup();
    protected override void OnInitialized()
    {
        Node node1 = createNode("node1", 100, 100, "Node1");
        Node node2 = createNode("node2", 300, 100, "Node2");
        Node node3 = createNode("node3", 200, 250, "Node3");
        

        //// Grouping node 1 and node 2 into a single nodegroup.
        groupNode.Children = new string[] { "node1", "node2", "node3" };
        nodes.Add(node1);
        nodes.Add(node2);
        nodes.Add(node3);
        
        ShapeAnnotation annotation1 = new ShapeAnnotation
            {
                Content = "Group annotation"
            };
        groupNode.MinHeight = 100;
        groupNode.MaxHeight = 400;
        groupNode.BackgroundColor = "red";
        groupNode.Annotations = new DiagramObjectCollection<ShapeAnnotation>()
        {
            annotation1
        };
        nodes.Add(groupNode);
    }

    public Node createNode(string id, double offsetX, double offsetY, string content)
    {
        Node node = new Node()
            {
                ID = id,
                OffsetX = offsetX,
                OffsetY = offsetY,
                Height = 100,
                Width = 100,
                Style = new ShapeStyle() { Fill = "#6495ED" }
            };
        ShapeAnnotation annotation = new ShapeAnnotation
            {
                ID = "annotation1",
                Content = content,
                Style = new TextStyle()
                {
                    Color = "white",
                    Fill = "transparent",
                    StrokeColor = "None"
                },
            };
        node.Annotations = new DiagramObjectCollection<ShapeAnnotation>()
        {
             annotation
        };
        return node;
    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        await Task.Delay(500);
    //        diagram.SelectAll();
    //        // Adding the third node into the existing nodegroup.
    //        diagram.Group();
    //    }
    //}
}
*@

@*        @using Syncfusion.Blazor.Buttons

<SfButton Content="Draw a Node" OnClick="@AddNode"></SfButton>
<SfButton Content="Edit Node" OnClick="@EditNode"></SfButton>
<SfDiagramComponent @ref="@diagram" Height="600px" Width="1000px" Nodes="@NodeCollection">
    <DiagramTemplates>
        <NodeTemplate>
            <div class="maindiv">
                <div>
                      <img src="images/profile.jpg" class="image" />
                </div>
                <div class="header" >
                    <div class="header1" >
                          Daniel Tonini
                    </div>
                     <div id="header2">
                           Project Lead
                     </div>
                </div
            </div>
        </NodeTemplate>
    </DiagramTemplates>
</SfDiagramComponent>

@code
{
    public DiagramObjectCollection<Node> NodeCollection = new DiagramObjectCollection<Node>();
    SfDiagramComponent diagram;

    protected override void OnInitialized()
    {
        Node node = new Node()
            {
                ID = "node1",
                OffsetX = 250,
                OffsetY = 250,
                Height = 150,
                Width = 150,
                Style = new ShapeStyle()
                {
                    Fill ="orange"
                    
                },
                Shape = new PathShape()
                {
                   Type = NodeShapes.Path,
                   Data = "M 355.31 12.07 C 352.11 5.95 345.35 -1.14 331.41 0.15 C 290.33 3.93 209.61 81.48 190.42 111.69 C 189.66 107.76 187.9 101.49 184.12 98.05 C 189.5 87.75 198.01 69.64 201.57 52.48 C 202.4 52.26 203.12 51.68 203.34 50.44 C 203.72 48.34 204 46.22 204.39 44.13 C 205.01 40.62 199.99 39.43 199.42 42.91 C 199.06 45.06 198.69 47.15 198.35 49.31 C 198.16 50.6 198.69 51.62 199.54 52.14 C 196.08 68.87 187.75 86.63 182.43 96.81 C 181.52 96.29 180.53 95.87 179.41 95.7 C 179.09 95.65 178.8 95.72 178.5 95.71 C 178.19 95.72 177.91 95.65 177.59 95.7 C 176.46 95.87 175.48 96.29 174.56 96.81 C 169.24 86.63 160.92 68.87 157.46 52.14 C 158.3 51.62 158.83 50.6 158.65 49.31 C 158.3 47.15 157.93 45.06 157.58 42.91 C 157.01 39.43 151.99 40.62 152.61 44.13 C 152.99 46.22 153.28 48.34 153.66 50.44 C 153.87 51.68 154.6 52.27 155.42 52.48 C 158.98 69.63 167.49 87.75 172.87 98.05 C 169.09 101.49 167.33 107.76 166.57 111.69 C 147.39 81.48 66.67 3.93 25.59 0.15 C 11.65 -1.14 4.89 5.95 1.69 12.07 C -2.05 19.07 0.84 33.48 6.24 58.46 C 8.66 69.55 11.16 80.96 12.94 92.2 C 13.89 98.36 14.79 104.49 15.64 110.36 C 19.39 136.89 22.52 158.97 32.64 166.04 C 35.41 167.98 38.65 168.78 42.61 168.24 C 52.26 165.95 63.79 164.03 75.99 162.67 C 64.03 171.47 49.08 185.81 44.17 204.84 C 40.38 219.72 43.37 234.86 53.01 250.05 C 64.37 267.81 76.02 279.48 86.91 287.09 C 108.68 302.31 127.52 301.24 135.48 300.78 C 136.3 300.77 136.94 300.71 137.56 300.69 C 143.62 300.61 147.76 291.39 156.6 270.51 C 160.94 260.34 167.39 245.19 172.83 237.47 C 173.97 240.31 177.22 242.31 178.92 242.87 C 178.78 242.94 178.62 243.07 178.49 243.12 C 178.65 243.08 178.83 242.97 179 242.91 C 179.1 242.94 179.25 243.02 179.34 243.04 C 179.26 243.01 179.13 242.93 179.04 242.89 C 180.83 242.24 183.05 240.25 184.16 237.48 C 189.6 245.19 196.05 260.34 200.39 270.52 C 209.23 291.4 213.38 300.61 219.43 300.7 C 220.05 300.72 220.69 300.77 221.51 300.78 C 229.47 301.25 248.31 302.31 270.08 287.1 C 280.97 279.49 292.62 267.81 303.98 250.05 C 313.62 234.86 316.6 219.72 312.82 204.84 C 307.91 185.82 292.96 171.48 281 162.67 C 293.2 164.03 304.73 165.95 314.38 168.24 C 318.34 168.78 321.58 167.98 324.35 166.04 C 334.47 158.97 337.6 136.89 341.35 110.37 C 342.19 104.49 343.1 98.37 344.05 92.2 C 345.83 80.96 348.33 69.55 350.75 58.46 C 356.16 33.48 359.05 19.07 355.31 12.07 z M 183.92 237.56 C 182.35 240.3 180.35 242.13 178.97 242.86 C 177.49 242.19 174.7 240.38 173.08 237.56 C 173.08 237.56 166.19 138.22 166.91 113.58 C 166.91 113.58 169.24 97.92 178.5 97.81 C 187.76 97.92 190.09 113.58 190.09 113.58 C 190.81 138.22 183.92 237.56 183.92 237.56 z"
                   //Source = "/images/profile.jpg"
                },
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                {
                    new ShapeAnnotation()
                    {
                        Content = "New Annotation"
                    }
                }


            };
        NodeCollection.Add(node);
    }
    private void AddNode()
    {

        diagram.InteractionController = DiagramInteractions.DrawOnce;
        diagram.DrawingObject = new Node()
            {
                Shape = new BasicShape() { Type = NodeShapes.Basic, Shape = NodeBasicShapes.Rectangle }
            };
        //Node newnode = new Node()
        //    {
        //        ID = "node2",
        //        OffsetX = 450,
        //        OffsetY = 450,
        //        Height = 150,
        //        Width = 150,
        //        Style = new ShapeStyle
        //        {
        //            Fill = "#6495ED"
        //        }
        //    };
        //NodeCollection.Add(newnode);
    }

    private void EditNode()
    {
        NodeCollection.Remove(NodeCollection[0]);
        //diagram.BeginUpdate();
        //NodeCollection[0].Style.Fill = "red";
        //NodeCollection[0].Style.StrokeColor = "yellow";
        //NodeCollection[0].Style.StrokeWidth = 3;
        //diagram.EndUpdate();
    }
}
<style>
    .maindiv {
        height: 150px;
        width: 200px;
        background-color: aqua
    }

    .image {
        height: 70px;
        width: 70px;
        border-radius: 50px;
        padding: 10px;
    }

    .header {
        margin-left: 72px;
        margin-top: -62px;
    }

    .header1 {
        font-weight: bold;
        padding-bottom: 5px;
    }
</style>*@



     @*   Node node1 = createNode("node1", 100, 100, "Node1");
        Node node2 = createNode("node2", 300, 100, "Node2");
        Node node3 = createNode("node3", 200, 250, "Node3");
        Node node4 = createNode("node4", 400, 350, "Node4");

        NodesCollection.Add(node1);
        NodesCollection.Add(node2);
        NodesCollection.Add(node3);
        NodesCollection.Add(node4);

        Connector Connector1 = CreateConnector("Connector1", ConnectorSegmentType.Orthogonal, DecoratorShape.None, "node1", "node2");
        Connector Connector2 = CreateConnector("Connector2", ConnectorSegmentType.Straight, DecoratorShape.Arrow, "node2", "node3");
        Connector Connector3 = CreateConnector("Connector3", ConnectorSegmentType.Bezier, DecoratorShape.Diamond, "node3", "node1");
        ConnectorCollection.Add(Connector1);
        ConnectorCollection.Add(Connector2);
        ConnectorCollection.Add(Connector3);



        ShapeAnnotation annotation = new ShapeAnnotation
            {
                Content = "Group Annotation"
            };

        Group1 = new NodeGroup()
            {
                ID = "Group1",
                Children = new string[] { "node1", "node2", "node3", "Connector1", "Connector2", "Connector3" },
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                {
                    annotation
                },
                Style = new ShapeStyle() { Fill = "yellow" }
            };
        //NodesCollection.Add(Group1);
        NodesCollection.Add(Group1);
        // await diagram.AddDiagramElements(Collection);
        NodeGroup Group2 = new NodeGroup()
            {
                ID = "Group2",
                Children = new string[] { "Group1", "node4" },
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
            {
                new ShapeAnnotation
                {
                    Content ="Nested Group"
                }
            },
                Style = new ShapeStyle { Fill = "orange" }
            };
            NodesCollection.Add(Group2);

        }
        public Connector CreateConnector(string id, ConnectorSegmentType type, DecoratorShape shape, string sourceID, string targetID)
        {
        Connector connector = new Connector
        {
        ID = id,
        Type = type,
        TargetDecorator = new DecoratorSettings()
        {
        Shape = shape
        },
        SourceID = sourceID,
        TargetID = targetID

        };
        return connector;
        }
*@